# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
            - name: Gradle Build Action
  # You may pin to the exact commit or the version.
  # uses: gradle/gradle-build-action@ac2d340dc04d9e1113182899e983b5400c17cda1
  uses: gradle/gradle-build-action@v3.5.0
  with:
    # Gradle version to use. If specified, this Gradle version will be downloaded, added to the PATH and used for invoking Gradle.
If not provided, it is assumed that the project uses the Gradle Wrapper.

    gradle-version: # optional
    # When 'true', all caching is disabled. No entries will be written to or read from the cache.
    cache-disabled: # optional
    # When 'true', existing entries will be read from the cache but no entries will be written.
By default this value is 'false' for workflows on the GitHub default branch and 'true' for workflows on other branches.

    cache-read-only: # optional, default is ${{ github.event.repository != null && github.ref_name != github.event.repository.default_branch }}
    # When 'true', entries will not be restored from the cache but will be saved at the end of the Job.
Setting this to 'true' implies cache-read-only will be 'false'.

    cache-write-only: # optional
    # When 'true', a pre-existing Gradle User Home will not prevent the cache from being restored.
    cache-overwrite-existing: # optional
    # A base64 encoded AES key used to encrypt the configuration-cache data. The key is exported as 'GRADLE_ENCRYPTION_KEY' for later steps.
A suitable key can be generated with `openssl rand -base64 16`.
Configuration-cache data will not be saved/restored without an encryption key being provided.

    cache-encryption-key: # optional
    # Paths within Gradle User Home to cache.
    gradle-home-cache-includes: # optional, default is caches
notifications

    # Paths within Gradle User Home to exclude from cache.
    gradle-home-cache-excludes: # optional
    # When 'true', the action will attempt to remove any stale/unused entries from the Gradle User Home prior to saving to the GitHub Actions cache.
    gradle-home-cache-cleanup: # optional
    # Specifies when a Job Summary should be inluded in the action results. Valid values are 'never', 'always' (default), and 'on-failure'.
    add-job-summary: # optional, default is always
    # Specifies when each Job Summary should be added as a PR comment. Valid values are 'never' (default), 'always', and 'on-failure'. No action will be taken if the workflow was not triggered from a pull request.
    add-job-summary-as-pr-comment: # optional, default is never
    # Specifies if a GitHub dependency snapshot should be generated for each Gradle build, and if so, how.
Valid values are 'disabled' (default), 'generate', 'generate-and-submit', 'generate-and-upload', 'download-and-submit' and 'clear'.

    dependency-graph: # optional, default is disabled
    # When 'false' a failure to generate or submit a dependency graph will fail the Step or Job. When 'true' a warning will be emitted but no failure will result.
    dependency-graph-continue-on-failure: # optional, default is true
    # Specifies the number of days to retain any artifacts generated by the action. If not set, the default retention settings for the repository will apply.
    artifact-retention-days: # optional
    # Set to 'true' to automatically publish build results as a Build Scan on scans.gradle.com.
For publication to succeed without user input, you must also provide values for `build-scan-terms-of-use-url` and 'build-scan-terms-of-use-agree'.

    build-scan-publish: # optional
    # The URL to the Build Scan速 terms of use. This input must be set to 'https://gradle.com/terms-of-service' or 'https://gradle.com/help/legal-terms-of-use'.
    build-scan-terms-of-use-url: # optional
    # Indicate that you agree to the Build Scan速 terms of use. This input value must be "yes".
    build-scan-terms-of-use-agree: # optional
    # Develocity access key. Should be set to a secret containing the Develocity Access key.
    develocity-access-key: # optional
    # The Develocity short-lived access tokens expiry in hours. Default is 2 hours.
    develocity-token-expiry: # optional
    # Enables Develocity injection.
    develocity-injection-enabled: # optional
    # The URL for the Develocity server.
    develocity-url: # optional
    # Allow communication with an untrusted server; set to _true_ if your Develocity instance is using a self-signed.
    develocity-allow-untrusted-server: # optional
    # Enables capturing the paths and content hashes of each individual input file.
    develocity-capture-file-fingerprints: # optional
    # Enforce the configured Develocity URL over a URL configured in the project's build; set to _true_ to enforce publication of build scans to the configured Develocity URL.
    develocity-enforce-url: # optional
    # The version of the Develocity Gradle plugin to apply.
    develocity-plugin-version: # optional
    # The version of the Common Custom User Data Gradle plugin to apply, if any.
    develocity-ccud-plugin-version: # optional
    # The URL of the repository to use when resolving the Develocity and CCUD plugins; the Gradle Plugin Portal is used by default.
    gradle-plugin-repository-url: # optional
    # The username for the repository URL to use when resolving the Develocity and CCUD.
    gradle-plugin-repository-username: # optional
    # The password for the repository URL to use when resolving the Develocity and CCUD plugins; Consider using secrets to pass the value to this variable.
    gradle-plugin-repository-password: # optional
    # When 'true', the action will perform the 'wrapper-validation' action automatically.
If the wrapper checksums are not valid, the action will fail.

    validate-wrappers: # optional
    # The URL to the Build Scan速 terms of use. This input must be set to 'https://gradle.com/terms-of-service'.
    build-scan-terms-of-service-url: # optional
    # Indicate that you agree to the Build Scan速 terms of use. This input value must be "yes".
    build-scan-terms-of-service-agree: # optional
    # When 'false', no Job Summary will be generated for the Job.
    generate-job-summary: # optional, default is true
    # Gradle command line arguments (supports multi-line input)
    arguments: # optional
    # Path to the root directory of the build. Default is the root of the GitHub workspace.
    build-root-directory: # optional
    # When 'true', the action will not attempt to restore the Gradle User Home entries from other Jobs.
    gradle-home-cache-strict-match: # optional
    # Used to uniquely identify the current job invocation. Defaults to the matrix values for this job; this should not be overridden by users (INTERNAL).
    workflow-job-context: # optional, default is ${{ toJSON(matrix) }}
    # The GitHub token used to authenticate when submitting via the Dependency Submission API.
    github-token: # optional, default is ${{ github.token }}
                - name: Bats Wrapper
  # You may pin to the exact commit or the version.
  # uses: bkahlert/bats-wrapper@fb05b7457af1460613428eeef3a6e5914d79deac
  uses: bkahlert/bats-wrapper@v0.1.4
  with:
    # Only run tests that match the regular expression
    filter: # optional
    # Switch between formatters: pretty (default), tap (default w/o term), tap13, junit

    formatter: # optional
    # Gather the output of failing *and* passing tests as files in directory

    gather-test-outputs-in: # optional
    # Number of parallel jobs
    jobs: # optional
    # Preserve test output temporary directory
    no-tempdir-cleanup: # optional
    # Serialize test file execution instead of running them in parallel (requires --jobs >1)

    no-parallelize-across-files: # optional
    # Serialize test execution within files instead of running them in parallel (requires --jobs >1)

    no-parallelize-within-files: # optional
    # Switch between reporters (same options as --formatter)
    report-formatter: # optional
    # Directory to write report files
    output: # optional
    # Automatically print the value of `$output` on failed tests
    print-output-on-failure: # optional
    # Include tests in subdirectories
    recursive: # optional
    # Print output of passing tests
    show-output-of-passing-tests: # optional
    # Add timing information to tests
    timing: # optional
    # Print test commands as they are executed (like `set -x`)
    trace: # optional
    # Make `run` print `$output` by default
    verbose-run: # optional
    # Path to a Bats test file, or to a directory containing Bats test files (ending with ".bats")

    tests: 
              - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.4
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    
